package cn.com.cdboost.collect.impl;

import cn.com.cdboost.collect.common.BaseServiceImpl;
import cn.com.cdboost.collect.dao.ChargingCardMapper;
import cn.com.cdboost.collect.dao.ChargingCstMapper;
import cn.com.cdboost.collect.dao.ChargingPayMapper;
import cn.com.cdboost.collect.dto.ChargingICCardDto;
import cn.com.cdboost.collect.dto.param.ChargerICCardAddParam;
import cn.com.cdboost.collect.dto.param.ChargerICCardEditParam;
import cn.com.cdboost.collect.dto.param.ChargerICCardQueryVo;
import cn.com.cdboost.collect.dto.param.OffOnCardParam;
import cn.com.cdboost.collect.exception.BusinessException;
import cn.com.cdboost.collect.model.ChargingCard;
import cn.com.cdboost.collect.model.ChargingPay;
import cn.com.cdboost.collect.service.ChargingCardService;
import cn.com.cdboost.collect.util.StringUtil;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimaps;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import tk.mybatis.mapper.entity.Condition;

import javax.annotation.Nullable;
import java.math.BigDecimal;
import java.util.*;

@Service
public class ChargingCardServiceImpl extends BaseServiceImpl<ChargingCard> implements ChargingCardService{

    @Autowired
    private ChargingCardMapper chargingCardMapper;
    @Autowired
    private ChargingCstMapper chargingCstMapper;
    @Autowired
    private ChargingPayMapper chargingPayMapper;

    @Override
    public List<ChargingICCardDto> queryList(ChargerICCardQueryVo queryVo) {
        //驼峰转下划线
        queryVo.setSortName(StringUtil.camelToUnderline(queryVo.getSortName()));
        if ("ic_remain_amount".equals(queryVo.getSortName())){
            queryVo.setSortName("t.remain_amount");
        }
        if ("update_time".equals(queryVo.getSortName())){
            queryVo.setSortName("t.update_time");
        }
        List<ChargingICCardDto> chargingICCardDtos = chargingCardMapper.queryList(queryVo);
        //查询总数
        Integer total = chargingCardMapper.queryListTotal(queryVo);
        queryVo.setTotal(total.longValue());

        List<String> cardIds = Lists.newArrayList();
        for (ChargingICCardDto chargingICCardDto : chargingICCardDtos) {
            cardIds.add(chargingICCardDto.getCardId());
            if (chargingICCardDto.getWebcharNo() != null){
                chargingICCardDto.setCustomerType("微信");
            } else if (chargingICCardDto.getAlipayUserId() != null){
                chargingICCardDto.setCustomerType("支付宝");
            }
            if (chargingICCardDto.getWebcharNo() != null && chargingICCardDto.getAlipayUserId() != null){
                chargingICCardDto.setCustomerType("微信、支付宝");
            }
        }

        //统计IC卡充值次数
        Condition condition = new Condition(ChargingPay.class);
        Condition.Criteria criteria = condition.createCriteria();
        criteria.andIn("cardId",cardIds);
        List<ChargingPay> chargingPays = chargingPayMapper.selectByCondition(condition);
        ImmutableListMultimap<String, ChargingPay> multimap = Multimaps.index(chargingPays, new Function<ChargingPay, String>() {
            @Nullable
            @Override
            public String apply(@Nullable ChargingPay chargingPay) {
                return chargingPay.getCardId();
            }
        });

        for (ChargingICCardDto chargingICCardDto : chargingICCardDtos) {
            if (!CollectionUtils.isEmpty(multimap.get(chargingICCardDto.getCardId()))){
                Integer payCnt = multimap.get(chargingICCardDto.getCardId()).size();
                chargingICCardDto.setPayCnt(payCnt);
            }
        }
        if ("pay_cnt".equals(queryVo.getSortName())){
            if ("asc".equals(queryVo.getSortOrder())){
                Collections.sort(chargingICCardDtos, new Comparator<ChargingICCardDto>() {
                    @Override
                    public int compare(ChargingICCardDto o1, ChargingICCardDto o2) {
                        int i = o1.getPayCnt() - o2.getPayCnt();
                        return i;
                    }
                });
            }else {
                Collections.sort(chargingICCardDtos, new Comparator<ChargingICCardDto>() {
                    @Override
                    public int compare(ChargingICCardDto o1, ChargingICCardDto o2) {
                        int i = o2.getPayCnt() - o1.getPayCnt();
                        return i;
                    }
                });
            }
        }
        return chargingICCardDtos;
    }

    @Override
    @Transactional
    public void addCard(ChargerICCardAddParam param, Integer id) {
        ChargingCard card = new ChargingCard();
        card.setCardId(param.getCardId());
        List<ChargingCard> select = chargingCardMapper.select(card);
        if (select.size() > 0){
            throw new BusinessException("卡号不能重复!");
        }
        BeanUtils.copyProperties(param,card);
        card.setCustomerName(param.getCustomerName());
        card.setRemainAmount(param.getInitAmount());
        //添加IC卡信息
        chargingCardMapper.insertSelective(card);
    }

    @Override
    @Transactional
    public void editCard(ChargerICCardEditParam param, Integer id) {
        //修改ic卡表
        ChargingCard card = new ChargingCard();
        BeanUtils.copyProperties(param,card);
        card.setCustomerName(param.getCustomerName());
        card.setUpdateTime(new Date());
        Condition condition = new Condition(ChargingCard.class);
        Condition.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("cardId",card.getCardId());
        chargingCardMapper.updateByConditionSelective(card,condition);
    }

    @Override
    public void delete(List<String> cardIds, Integer id) {
        //删除充电IC卡
        Condition condition = new Condition(ChargingCard.class);
        Condition.Criteria criteria = condition.createCriteria();
        criteria.andIn("cardId",cardIds);
        List<ChargingCard> chargingCards = chargingCardMapper.selectByCondition(condition);
        Iterator<ChargingCard> it = chargingCards.iterator();
        String message = "";
        while(it.hasNext()){
            ChargingCard chargingCard = it.next();
            if (chargingCard.getRemainAmount().compareTo(BigDecimal.ZERO) != 0){
                it.remove();
                cardIds.remove(chargingCard.getCardId());
                message = "所选卡还有余额！";
            }
        }
        if (!CollectionUtils.isEmpty(cardIds)){
            criteria.andIn("cardId",cardIds);
            chargingCardMapper.deleteByCondition(condition);
        }
        if (!"".equals(message)){
            throw new BusinessException(message);
        }
    }

    @Override
    public void offOnCard(OffOnCardParam param, Integer id) {
        ChargingCard card = new ChargingCard();
        if (param.getOnOrOff() == 0){
            card.setCardState(2);
        }else if (param.getOnOrOff() == 1){
            card.setCardState(1);
        }
        card.setUpdateTime(new Date());
        //批量修改ic卡状态
        Condition condition = new Condition(ChargingCard.class);
        Condition.Criteria criteria = condition.createCriteria();
        criteria.andIn("cardId",param.getCardIds());
        chargingCardMapper.updateByConditionSelective(card, condition);
    }
}
