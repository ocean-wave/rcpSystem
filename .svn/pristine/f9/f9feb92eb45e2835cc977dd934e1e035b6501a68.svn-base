package cn.com.cdboost.collect.impl;

import cn.com.cdboost.collect.constant.ChargeAppConstant;
import cn.com.cdboost.collect.constant.ChargeConstant;
import cn.com.cdboost.collect.dao.*;
import cn.com.cdboost.collect.dto.RegisterDto;
import cn.com.cdboost.collect.dto.chargerApp.*;
import cn.com.cdboost.collect.dto.chargerApp.vo.*;
import cn.com.cdboost.collect.dto.param.ChargeAbnormalAlarmParam;
import cn.com.cdboost.collect.dto.param.ChargeNormalAlarmParam;
import cn.com.cdboost.collect.dto.param.EventQueryParam;
import cn.com.cdboost.collect.dto.response.WithdrawCashInfo;
import cn.com.cdboost.collect.exception.BusinessException;
import cn.com.cdboost.collect.model.*;
import cn.com.cdboost.collect.service.*;
import cn.com.cdboost.collect.util.DateUtil;
import cn.com.cdboost.collect.util.MathUtil;
import cn.com.cdboost.collect.util.UuidUtil;
import com.example.clienttest.client.AFN19Object;
import com.example.clienttest.clientfuture.ClientManager;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Nullable;
import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

@Service
public class AppChargerServiceImpl implements AppChargerService {
    private static final Logger logger = LoggerFactory.getLogger(AppChargerServiceImpl.class);

    @Autowired
    ChargingUseDetailedMapper chargingUseDetailedMapper;
    @Autowired
    ChargingPayMapper chargingPayMapper;
    @Autowired
    ChargingCstMapper chargingCstMapper;
    @Autowired
    ChargingPayChemeMapper chargingPayChemeMapper;
    @Autowired
    ChargingDeviceMapper chargingDeviceMapper;
    @Autowired
    WxChargerPayService wxChargerPayService;
    @Autowired
    ChargingDevlogMapper chargingDevlogMapper;
    @Autowired
    private ChargingDeviceService chargingDeviceService;
    @Autowired
    private ChargingUseDetailedService chargingUseDetailedService;
    @Autowired
    private ChargingDevlogService chargingDevlogService;
    @Autowired
    private ChargingPayChemeService chargingPayChemeService;
    @Autowired
    private ChargingCstService chargingCstService;
    @Autowired
    private ChargingPayService chargingPayService;
    @Autowired
    private ChargingProjectService chargingProjectService;
    @Autowired
    private ChargingWithdrawCashService chargingWithdrawCashService;
    @Autowired
    private AliyunSmsService aliyunSmsService;
    @Override
    public WxBaseInfoDto getBaseInfo(WxBaseInfoVo wxBaseInfoVo) {
        ChargingDevice chargingDeviceC = null;
        //查询设备
        if(!StringUtils.isEmpty(wxBaseInfoVo.getDeviceNo())){
            ChargingDevice chargingDeviceCondition = new ChargingDevice();
            chargingDeviceCondition.setDeviceNo(wxBaseInfoVo.getDeviceNo());
            chargingDeviceC = chargingDeviceMapper.selectOne(chargingDeviceCondition);
        }
        WxBaseInfoDto wxBaseInfoDto = new WxBaseInfoDto();
        //获取设备及故障联系电话信息
        if(!StringUtils.isEmpty(wxBaseInfoVo.getDeviceNo())){
            wxBaseInfoDto = chargingDeviceMapper.queryBaseInfo(wxBaseInfoVo);
        }

        // 根据openId查询客户信息表
        ChargingCst chargingCst = chargingCstService.queryByOpenId(wxBaseInfoVo.getOpenId());

        if(chargingCst!=null&&chargingCst.getRemainAmount()!=null){
            wxBaseInfoDto.setRemainAmount(MathUtil.setPrecision(chargingCst.getRemainAmount()));
        }
        //包月用户获取剩余次数
        if(chargingCst!=null&&chargingCst.getRemainCnt()!=null){
           wxBaseInfoDto.setRemainCnt(chargingCst.getRemainCnt());
        }

        boolean monthUser = this.isMonthUser(chargingCst);
        if (monthUser) {
            // 包月用户
            wxBaseInfoDto.setCustomerType(2);
            wxBaseInfoDto.setCustomerTypeDesc("包月用户");
            String dateStr = DateUtil.getDateStr(chargingCst.getExpireTime());
            wxBaseInfoDto.setEndTime(dateStr);
            wxBaseInfoDto.setRemainCnt(chargingCst.getRemainCnt());
        } else {
            // 非包月用户
            wxBaseInfoDto.setCustomerType(1);
            wxBaseInfoDto.setCustomerTypeDesc("普通用户");
        }

        if(chargingDeviceC!=null) {
            //设置查询条件
            Condition condition = new Condition(ChargingPayCheme.class);
            //condition.createCriteria().andCondition("project_guid = '" + chargingDeviceC.getProjectGuid() + "'");
            Example.Criteria criteria = condition.createCriteria();
            criteria.andEqualTo("projectGuid", chargingDeviceC.getProjectGuid()).andNotEqualTo("payCategory", 4);
            condition.setOrderByClause("sort_no ASC");
            //查询充值方案
            List<ChargingPayCheme> chemeList = chargingPayChemeMapper.selectByCondition(condition);
            List<PriceDto> priceDtoList = new ArrayList<>();
            if (chemeList != null && chemeList.size() > 0) {
                for (ChargingPayCheme chargingPayCheme : chemeList) {
                    //实例化价格方案
                    PriceDto priceDto = new PriceDto();
                    //设置充值时长
                    priceDto.setChargeTime(chargingPayCheme.getChargingTime());
                    //设置金额
                    priceDto.setMoney(MathUtil.setPrecision(chargingPayCheme.getMoney()));
                    //设置充值方式
                    priceDto.setPayCategory(chargingPayCheme.getPayCategory());
                    //设置价格ID
                    priceDto.setPriceId(chargingPayCheme.getId());
                    //增加价格方案
                    priceDtoList.add(priceDto);
                    if (priceDto.getPayCategory() == 1) {
                        priceDto.setPayDesc(chargingPayCheme.getMoney() + "元" + chargingPayCheme.getChargingTime() + "小时");
                    } else if (priceDto.getPayCategory() == 2) {
                        priceDto.setPayDesc("剩余" + chargingCst.getRemainCnt() + "次");
                    } else if (priceDto.getPayCategory() == 3) {
                        priceDto.setPayDesc(chargingPayCheme.getMoney() + "元充满");
                    }
                }
            }
            //设置查询方案
            /*
            if(priceDtoList.size()>1)
             CollectionsUtil.swap1(priceDtoList,0,1);
             */
            wxBaseInfoDto.setList_price(priceDtoList);
        }

        if(!StringUtils.isEmpty(wxBaseInfoVo.getDeviceNo())){
            if(wxBaseInfoDto.getRunState()==0){
                wxBaseInfoDto.setState(1);
                wxBaseInfoDto.setStateDesc("设备空闲");
                wxBaseInfoDto.setIsJump(2);
                wxBaseInfoDto.setIsJumpDesc("设备空闲中");
            }else if(wxBaseInfoDto.getRunState()==1){
                wxBaseInfoDto.setState(2);
                wxBaseInfoDto.setStateDesc("设备充电中");
                //设置查询条件
                Condition condition_c=new Condition(ChargingUseDetailed.class);
                condition_c.createCriteria().andCondition("charging_plie_guid = '"+chargingDeviceC.getChargingPlieGuid()+"'");
                condition_c.setOrderByClause("create_time DESC");
                List<ChargingUseDetailed> list = chargingUseDetailedMapper.selectByCondition(condition_c);
                if(list!=null){
                    if(list.get(0).getWebcharNo().trim().equals(wxBaseInfoVo.getOpenId().trim())){
                        wxBaseInfoDto.setIsJump(3);
                        wxBaseInfoDto.setIsJumpDesc("设备充电中");
                    }else{
                        wxBaseInfoDto.setIsJump(0);
                        wxBaseInfoDto.setIsJumpDesc("设备占用中");
                    }
                }else{
                    wxBaseInfoDto.setIsJump(2);
                    wxBaseInfoDto.setIsJumpDesc("设备空闲中");
                }
            }else{
                wxBaseInfoDto.setState(0);
                wxBaseInfoDto.setIsJump(0);
                wxBaseInfoDto.setStateDesc("设备故障");
                wxBaseInfoDto.setIsJumpDesc("设备故障");
            }
        }else{
            //设置更新条件
            Condition condition_c=new Condition(ChargingUseDetailed.class);
            condition_c.createCriteria().andCondition("webchar_no = '"+wxBaseInfoVo.getOpenId()+"'");

            List<ChargingUseDetailed> list = chargingUseDetailedMapper.selectByCondition(condition_c);
            if(list!=null&&list.size()>0){
                ChargingDevice chargingDeviceCondition = new ChargingDevice();
                chargingDeviceCondition.setChargingPlieGuid(list.get(0).getChargingPlieGuid());
                ChargingDevice chargingDevice = chargingDeviceMapper.selectOne(chargingDeviceCondition);
                if(chargingDevice.getRunState()==0){
                    wxBaseInfoDto.setState(1);
                    wxBaseInfoDto.setIsJump(1);
                    wxBaseInfoDto.setStateDesc("设备空闲");
                    wxBaseInfoDto.setIsJumpDesc("空闲中");
                }else if(chargingDevice.getRunState()==1){
                    wxBaseInfoDto.setState(2);
                    wxBaseInfoDto.setIsJump(3);
                    wxBaseInfoDto.setStateDesc("设备充电中");
                    wxBaseInfoDto.setIsJumpDesc("充电中");
                }
            }else{
                    wxBaseInfoDto.setState(1);
                    wxBaseInfoDto.setIsJump(1);
                    wxBaseInfoDto.setStateDesc("设备空闲");
                    wxBaseInfoDto.setIsJumpDesc("空闲中");
            }
        }
        return wxBaseInfoDto;
    }


    @Override
    public WxBaseInfoDto getBaseInfoNew(WxBaseInfoVo wxBaseInfoVo) {
        String openId = wxBaseInfoVo.getOpenId();
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
        WxBaseInfoDto dto = new WxBaseInfoDto();
        //判断是否注册
        if(!StringUtils.isEmpty(chargingCst.getCustomerContact())){
            if (StringUtils.isEmpty(wxBaseInfoVo.getDeviceNo())) {
                // 公众号进入
                dto = this.publicNumberOpen(openId);
            } else {
                String deviceNo = (wxBaseInfoVo.getDeviceNo()).substring(0,7);
                String port = (wxBaseInfoVo.getDeviceNo()).substring(7,wxBaseInfoVo.getDeviceNo().length());
                // 扫描设备二维码进入
                dto = this.qrCodeOpen(openId,deviceNo,port);
            }
        }else{
            dto.setIsJump(4);
            dto.setIsJumpDesc("用户未注册");
        }

        return dto;
    }

    /**
     * 公众号进入处理逻辑
     * @param openId
     */
    private WxBaseInfoDto publicNumberOpen(String openId) {
        // 判断该用户下是否存在充电中设备
        ChargingUseDetailed useDetailed = chargingUseDetailedService.queryChargingRecordByOpenId(openId);
        WxBaseInfoDto dto = new WxBaseInfoDto();
        if (useDetailed != null) {
            ChargingDevice params = new ChargingDevice();
            params.setChargingPlieGuid(useDetailed.getChargingPlieGuid());
            ChargingDevice chargingDevice = chargingDeviceService.selectOne(params);
            dto.setState(2);
            dto.setIsJump(3);
            dto.setStateDesc("设备充电中");
            dto.setDeviceNo(chargingDevice.getDeviceNo()+chargingDevice.getPort());
            dto.setIsJumpDesc("充电中");
        } else {
            // 不存在充电中设备,二维码扫码页面
            dto.setIsJump(1);
            dto.setIsJumpDesc("用户空闲中");
        }

        return dto;
    }

    /**
     * 二维码扫描处理逻辑
     * @param openId
     * @param deviceNo
     */
    private WxBaseInfoDto qrCodeOpen(String openId, String deviceNo,String port) {
        // 判断该用户下是否存在充电中设备
        ChargingUseDetailed useDetailed = chargingUseDetailedService.queryChargingRecordByOpenId(openId);
        WxBaseInfoDto dto = new WxBaseInfoDto();
        if (useDetailed != null) {
            // 前端跳转到充电中页面
            ChargingDevice params = new ChargingDevice();
            params.setChargingPlieGuid(useDetailed.getChargingPlieGuid());
            ChargingDevice chargingDevice = chargingDeviceService.selectOne(params);
            dto.setState(2);
            dto.setIsJump(3);
            dto.setDeviceNo(chargingDevice.getDeviceNo()+chargingDevice.getPort());
            dto.setStateDesc("设备充电中");
            dto.setIsJumpDesc("充电中");
        } else {
            // 查询对应充电桩设备
            ChargingDevice chargingDevice = chargingDeviceService.queryByDeviceNo(deviceNo,port);
            if(chargingDevice==null){
                dto.setIsJump(0);
                dto.setIsJumpDesc("设备不存在");
                return dto;
            }
            // 查询项目信息
            ChargingProject chargingProject = chargingProjectService.queryByProjectGuid(chargingDevice.getProjectGuid());
            if(chargingProject==null){
                dto.setIsJump(0);
                dto.setIsJumpDesc("设备不存在");
                return dto;
            }
            dto.setPhone(chargingProject.getContactTelphone());
            dto.setDeviceNo(deviceNo);
            dto.setDeviceName(chargingDevice.getDeviceName());
            dto.setRunState(chargingDevice.getRunState());
            //设置端口
            dto.setPort(Integer.toString(Integer.parseInt(chargingDevice.getPort(),16)));

            Integer runState = chargingDevice.getRunState();
            if (ChargeConstant.DeviceRunState.CHARGING.getState().equals(runState)) {
                // 别人正在充电中
                dto.setState(0);
                dto.setIsJump(0);
                dto.setStateDesc("设备被占用，正在充电中");
                dto.setIsJumpDesc("设备被占用，正在充电中");
            } else {
                // 未被别人占用
                Integer online = chargingDevice.getOnline();
                if (ChargeConstant.DeviceOnlineStatus.OFFLINE.getStatus().equals(online)) {
                    // 离线
                    // 前端跳转到离线页面
                    dto.setState(0);
                    dto.setIsJump(0);
                    dto.setStateDesc("设备已离线");
                    dto.setIsJumpDesc("设备已离线");
                } else {
                    // 在线
                    if (ChargeConstant.DeviceRunState.IDEL.getState().equals(runState)) {
                        // 跳转到设备充值购买页面
                        dto.setState(1);
                        dto.setStateDesc("设备空闲");
                        dto.setIsJump(2);
                        dto.setIsJumpDesc("设备空闲中");

                        // 设置用户信息
                        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
                        this.setUserInfo(dto,chargingCst);

                        // 设置购买方案列表
                        this.setSchemeList(dto,chargingCst,chargingDevice.getProjectGuid());
                    } else if (ChargeConstant.DeviceRunState.UN_USE.getState().equals(runState)) {
                        // 跳转到设备停用页面
                        dto.setState(0);
                        dto.setIsJump(0);
                        dto.setStateDesc("设备已停用");
                        dto.setIsJumpDesc("设备已停用");
                    } else if (ChargeConstant.DeviceRunState.FAULT.getState().equals(runState)) {
                        // 跳转到设备故障页面
                        dto.setState(0);
                        dto.setIsJump(0);
                        dto.setStateDesc("设备故障");
                        dto.setIsJumpDesc("设备故障");
                    }
                }
            }
        }

        return dto;
    }

    /**
     * 往WxBaseInfoDto中设置用户相关信息
     * @param dto
     */
    private void setUserInfo(WxBaseInfoDto dto, ChargingCst chargingCst) {
        boolean monthUser = this.isMonthUser(chargingCst);
        if (monthUser) {
            // 包月用户
            dto.setCustomerType(ChargeAppConstant.UserType.USER_MONTH.getType());
            dto.setCustomerTypeDesc(ChargeAppConstant.UserType.USER_MONTH.getTypeDesc());
            String dateStr = DateUtil.getDateStr(chargingCst.getExpireTime());
            dto.setEndTime(dateStr);
            dto.setRemainCnt(chargingCst.getRemainCnt());
            dto.setRemainAmount(chargingCst.getRemainAmount());
        } else {
            // 非包月用户
            dto.setCustomerType(ChargeAppConstant.UserType.USER_COMMON.getType());
            dto.setCustomerTypeDesc(ChargeAppConstant.UserType.USER_COMMON.getTypeDesc());
            dto.setRemainAmount(chargingCst.getRemainAmount());
            dto.setRemainCnt(0);
        }
    }

    /**
     * 设置充电购买方案列表
     * @param dto
     * @param chargingCst
     * @param projectGuid
     */
    private void setSchemeList(WxBaseInfoDto dto, ChargingCst chargingCst, String projectGuid) {
        List<ChargingPayCheme> chemeList = chargingPayChemeService.querySchemeList(projectGuid);
        List<PriceDto> priceDtoList = new ArrayList<>();
        for (ChargingPayCheme chargingPayCheme : chemeList) {
            PriceDto priceDto = new PriceDto();
            priceDto.setChargeTime(chargingPayCheme.getChargingTime());
            priceDto.setMoney(MathUtil.setPrecision(chargingPayCheme.getMoney()));
            priceDto.setPayCategory(chargingPayCheme.getPayCategory());
            priceDto.setPriceId(chargingPayCheme.getId());
            priceDtoList.add(priceDto);

            Integer payCategory = chargingPayCheme.getPayCategory();
            StringBuilder sb = new StringBuilder();
            if (ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType().equals(payCategory)) {
                sb.append("充").append(chargingPayCheme.getChargingTime()).append("小时");
                priceDto.setPayDesc(sb.toString());
            } else if (ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(payCategory)) {
                boolean monthUser = this.isMonthUser(chargingCst);
                if (monthUser) {
                    // 包月用户
                    sb.append("剩余").append(chargingCst.getRemainCnt()).append("次");
                    priceDto.setPayDesc(sb.toString());
                } else {
                    priceDto.setPayDesc("剩余0次");
                }

            } else if (ChargeConstant.SchemePayCategory.RECHARGE_FULL.getType().equals(payCategory)) {
                sb.append("一键充满");
                priceDto.setPayDesc(sb.toString());
            }
        }

        dto.setList_price(priceDtoList);
    }

    /**
     * 判断用户是否是月卡用户
     * @param chargingCst
     * @return
     */
    private boolean isMonthUser(ChargingCst chargingCst) {
        // 是否包月用户
        boolean flag = false;
        Date expireTime = chargingCst.getExpireTime();
        if (expireTime != null) {
            Integer remainCnt = chargingCst.getRemainCnt();
            Date current = new Date();
            if (current.before(expireTime) && remainCnt > 0) {
                // 剩余次数大于0，并且在有效期内
                flag = true;
            }
        }
        return flag;
    }

    @Override
    public ChargeOnlineDto getChargeOnline(ChargeOnlineVo chargeOnlineVo) {
        ChargeOnlineDto chargeOnlineDto = new ChargeOnlineDto();
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByOpenId(chargeOnlineVo.getOpenId());
        if(chargingUseDetailed!=null){
            // 查询充值设备
            ChargingDevice chargingDevice = chargingDeviceService.queryByChargingPlieGuid(chargingUseDetailed.getChargingPlieGuid());
            //设置状态
            chargeOnlineDto.setState(chargingDevice.getRunState());
            String descByState = ChargeConstant.DeviceRunState.getDescByState(chargingDevice.getRunState());
            chargeOnlineDto.setStateDesc(descByState);

            //设置设备编号
            chargeOnlineDto.setDeviceNo(chargingDevice.getDeviceNo());
            //设置端口号
            chargeOnlineDto.setPort(Integer.toString(Integer.parseInt(chargingDevice.getPort(),16)));
            //设置已冲电量
            Integer devLogId = chargingUseDetailed.getDevLogId();
            if (devLogId != null) {
                // 查询充电桩上报日志表记录
                ChargingDevlog chargingDevlog = chargingDevlogService.selectByPrimaryKey(devLogId);
                // 设置已充电量
                chargeOnlineDto.setChargedElectric(chargingDevlog.getChargingPercent());
                // 设置剩余时间，单位秒
                //BigDecimal remainTime = chargingDevlog.getRemainTime().multiply(BigDecimal.valueOf(60));
                //chargeOnlineDto.setRemainTime(remainTime.longValue());
            } else {
                // 设置已充电量
                chargeOnlineDto.setChargedElectric(MathUtil.setPrecision(BigDecimal.ZERO));
            }
            // 剩余时间
            Date sTime = chargingUseDetailed.getStartTime();
            Date eTime = new Date();
            long ycTime = ((eTime.getTime()-sTime.getTime())/1000);
            long syTime = (chargingUseDetailed.getChargingTime()*60*60)-((eTime.getTime()-sTime.getTime())/1000);
            chargeOnlineDto.setRemainTime(syTime);
            chargeOnlineDto.setChargeTime(ycTime);
            if(chargingUseDetailed.getPayCategory()==ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType()){
                chargeOnlineDto.setChemeDesc(ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getDesc());
            }else if(chargingUseDetailed.getPayCategory()==ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType()){
                chargeOnlineDto.setChemeDesc(ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getDesc());
            }else if(chargingUseDetailed.getPayCategory()==ChargeConstant.SchemePayCategory.RECHARGE_FULL.getType()){
                chargeOnlineDto.setChemeDesc(ChargeConstant.SchemePayCategory.RECHARGE_FULL.getDesc());
            }
        }

        return chargeOnlineDto;
    }

    @Override
    public ChargeDto charge(ChargeVo chargeVo) {
        String deviceNo = chargeVo.getDeviceNo().substring(0,7);
        String port = chargeVo.getDeviceNo().substring(7,chargeVo.getDeviceNo().length());
        //实例化结果对象
        ChargeDto chargeDto = new ChargeDto();
        //获取价格方案的金额
        Integer priceId = chargeVo.getPriceId();
        ChargingPayCheme chargingPayCheme = chargingPayChemeService.selectByPrimaryKey(priceId);

        String openId = chargeVo.getOpenId();
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);

        ChargingDevice chargingDevice = chargingDeviceService.queryByDeviceNo(deviceNo,port);
        String commNo = chargingDevice.getCommNo();
        chargeDto.setIsCharge(1);

        // TODO 充值时间，单位小时，测试时除以60, 正式发布时，需要改回来
        Integer chargingTime = chargingPayCheme.getChargingTime();
//        BigDecimal divide = MathUtil.divide(BigDecimal.valueOf(chargingTime), BigDecimal.valueOf(60));
//        BigDecimal decimal = MathUtil.setPrecision(divide);

        //针对不包月购买次数的用户
        if(ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType().equals(chargingPayCheme.getPayCategory()) ||
                ChargeConstant.SchemePayCategory.RECHARGE_FULL.getType().equals(chargingPayCheme.getPayCategory())) {
            //获取用户余额，和传入价格方案的金额进行对比
            boolean greaterEqual = MathUtil.isGreaterEqual(chargingCst.getRemainAmount(),chargingPayCheme.getMoney());
            if (!greaterEqual) {
                //剩余金额小于价格方案的金额，则调取支付接口进行支付，支付成功后，前端再次则就调用充电接口，准备充电
                //获取差价
                BigDecimal payMoney = MathUtil.sub(chargingPayCheme.getMoney(), chargingCst.getRemainAmount());
                chargeDto.setIsCharge(0);
                chargeDto.setPay(MathUtil.setPrecision(payMoney));

                //调用支付接口
                Ajax ajax = wxChargerPayService.chargePay(0,null,payMoney,chargeVo.getIp(),chargingPayCheme,chargingCst.getCustomerGuid(),chargeVo.getOpenId());
                //状态为1标识下单成功
                if(ajax.status==1){
                    //设置微信下单参数
                    chargeDto.setAppId(ajax.getParams().get("appId"));
                    chargeDto.setNonceStr(ajax.getParams().get("nonceStr"));
                    chargeDto.setTimeStamp(ajax.getParams().get("timeStamp"));
                    chargeDto.setPackages(ajax.getParams().get("package"));
                    chargeDto.setPaySign(ajax.getParams().get("paySign"));
                    chargeDto.setSignType(ajax.getParams().get("signType"));
                }
            }else{
                // 钱够，就直接下发充电指令
                // 发送通电指令
                this.sendChargeInstruction(commNo,port,openId,String.valueOf(priceId),String.valueOf(chargingTime));
            }
        } else if(ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(chargingPayCheme.getPayCategory())){
            // 包月用户的处理
            // 判断是否包月用户
            boolean monthUser = this.isMonthUser(chargingCst);
            if (monthUser) {
                // 发送通电指令
                this.sendChargeInstruction(commNo,port,openId,String.valueOf(priceId),String.valueOf(chargingTime));
            } else {
                //无剩余次数
                chargeDto.setIsCharge(0);
            }
        }
        return chargeDto;
    }

    /**
     * 发送充电指令
     */
    private void sendChargeInstruction(String commNo,String port,String openId,String priceId,String chargeTime) {
        String queueGuid = UuidUtil.getUuid();
        AFN19Object afn19Object = new AFN19Object(queueGuid,
                "19",
                "999999999",
                "42475858fffffa",
                commNo,
                "20000",
                port,
                "on",
                "",
                openId,
                priceId,
                chargeTime,
                Integer.toString(ChargeAppConstant.ChargingWay.CHARGING_TIME.getWay()));
        //下发数据
        afn19Object.setChargingGuid(UuidUtil.getUuid());
        int result = ClientManager.sendAFN19Msg(afn19Object);
        if (result != 1) {
            throw new BusinessException("下发充电指令失败");
        }
    }

    @Override
    public List<ChargeHistoryDto> chargeHistory(HistoryVo historyVo) {
        List<ChargeHistoryDto> dataList = Lists.newArrayList();
        //查询使用记录数据
        dataList = chargingUseDetailedMapper.queryUseRecord(historyVo);
        if (CollectionUtils.isEmpty(dataList)) {
            return dataList;
        }

        for (ChargeHistoryDto dto : dataList) {
            Integer payCategory = dto.getPayCategory();
            if (ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType().equals(payCategory) || ChargeConstant.SchemePayCategory.RECHARGE_FULL.getType().equals(payCategory)) {
                dto.setPayWayDesc(ChargeAppConstant.PayWay.PAY_USER_BALANCE.getPayWayDesc());
            } else if(ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(payCategory)) {
                dto.setPayWayDesc(ChargeAppConstant.PayWay.PAY_MONTH_CNT.getPayWayDesc());
            }

            dto.setPayWay(payCategory);
            dto.setChargeTime(DateUtil.getTimeDifference(dto.getEndTime(),dto.getStartTime()));
        }
        return dataList;
    }

    @Override
    public List<ChargeMoneyHistoryDto> chargeMoneyHistory(HistoryVo historyVo) {
        List<ChargeMoneyHistoryDto> dataList = Lists.newArrayList();
        //查询用户充值列表
        dataList = chargingPayMapper.queryCharge(historyVo);
        if (CollectionUtils.isEmpty(dataList)) {
            return dataList;
        }
        for (ChargeMoneyHistoryDto dto : dataList) {
            if(dto.getPayCategory()==2){
                dto.setPayCategoryDesc("月卡包月");
            }else{
                dto.setPayCategoryDesc("账户充值");
            }
        }

        //返回数据
        return dataList;
    }

    @Override
    public void stopCharge(StopChargeVo stopChargeVo) {
        String deviceNo = stopChargeVo.getDeviceNo().substring(0,7);
        String port = stopChargeVo.getDeviceNo().substring(7,stopChargeVo.getDeviceNo().length());
       ChargingDevice chargingDevice = chargingDeviceService.queryByDeviceNo(deviceNo,port);
        AFN19Object afn19Object;
        //设置下发参数
        String errorMsg;
        if(!StringUtils.isEmpty(stopChargeVo.getOpenId())){
            // app停止充电
            afn19Object = new AFN19Object(UUID.randomUUID().toString(),
                    "19","999999999",
                    "42475858fffffa"
                    ,chargingDevice.getCommNo(),
                    "0",
                     port,
                    "off",
                    null,
                     stopChargeVo.getOpenId(),
                    "1",
                    "0",
                    Integer.toString(ChargeAppConstant.ChargingWay.CHARGING_TIME.getWay()));
            errorMsg = "停止充电发送中间件指令失败";
        } else {
            // web端停止充电
            afn19Object = new AFN19Object(UUID.randomUUID().toString(),
                    "19",
                    "999999999",
                    "0042475858fffaa",
                    chargingDevice.getCommNo(),
                    "0",
                     port,
                    "off",
                     stopChargeVo.getSessionId(),
                    null,
                    "",
                    "0",
                    Integer.toString(ChargeAppConstant.ChargingWay.CHARGING_TIME.getWay()));
            errorMsg = "停用充电桩中间件指令失败";
        }

        //下发数据
        int result =  ClientManager.sendAFN19Msg(afn19Object);
        if (result != 1) {
            throw new BusinessException(errorMsg);
        }
    }

    @Override
    public Integer saveChargerCustomer(ChargingCst chargingCst) {
        Integer is_success = 0;
        if(chargingCst!=null){
            is_success = chargingCstMapper.insertSelective(chargingCst);
        }
        return is_success;
    }

    @Override
    public ChargingCst getCustomer(ChargingCst chargingCst) {
        return chargingCstMapper.selectOne(chargingCst);
    }

    @Override
    public ChargingPayCheme getPayCheme(Integer id) {
        return chargingPayChemeMapper.selectByPrimaryKey(id);
    }

    @Override
    public ChargingPay getChargingPay(ChargingPay chargingPay) {
        return chargingPayMapper.selectOne(chargingPay);
    }

    @Override
    public int updateChargingPay(ChargingPay chargingPay) {
        Condition condition=new Condition(ChargingPay.class);
        condition.createCriteria().andCondition("pay_flag = '"+chargingPay.getPayFlag()+"'");
        int is_success = chargingPayMapper.updateByConditionSelective(chargingPay,condition);
        return is_success;
    }

    @Override
    public List<MessageDto> alarm(EventQueryParam param) {
        List<MessageDto> messageDtoList = new ArrayList<>();

        Condition condition=new Condition(ChargingUseDetailed.class);
        condition.createCriteria().andCondition("webchar_no = '"+param.getOpenId()+"'");
        condition.setOrderByClause("create_time DESC");
        //查询充电使用记录
        List<ChargingUseDetailed> list = chargingUseDetailedMapper.selectByCondition(condition);
        if (CollectionUtils.isEmpty(list)) {
            return messageDtoList;
        }

        List<String> chargingGuidList = Lists.newArrayList();
        List<String> plieGuidList = Lists.newArrayList();
        for (ChargingUseDetailed detailed : list) {
            chargingGuidList.add(detailed.getChargingGuid());
            plieGuidList.add(detailed.getChargingPlieGuid());
        }

        // 查询充电桩信息
        List<ChargingDevice> chargingDevices = chargingDeviceService.batchQueryByChargingPlieGuids(plieGuidList);
        // 分组
        ImmutableMap<String, ChargingDevice> deviceMap = Maps.uniqueIndex(chargingDevices, new Function<ChargingDevice, String>() {
            @Nullable
            @Override
            public String apply(@Nullable ChargingDevice chargingDevice) {
                return chargingDevice.getChargingPlieGuid();
            }
        });

        //查询异常数据
        Condition conditionC=new Condition(ChargingDevlog.class);
        Example.Criteria criteria = conditionC.createCriteria();
        criteria.andIn("chargingGuid",chargingGuidList);
        criteria.andNotEqualTo("eventCode",0);
        // 设置分页信息
        PageHelper.startPage(param.getPageNumber(),param.getPageSize(),"create_time DESC");
        List<ChargingDevlog> eventList = chargingDevlogMapper.selectByCondition(conditionC);
        // 设置分页总条数
        PageInfo pageInfo = new PageInfo(eventList);
        param.setTotal(pageInfo.getTotal());

        for (ChargingDevlog chargingDevlog : eventList) {
            MessageDto messageDto = new MessageDto();
            // 设置设备编号（包含端口）
            ChargingDevice chargingDevice = deviceMap.get(chargingDevlog.getChargingPlieGuid());
            messageDto.setDeviceNo(chargingDevice.getDeviceNo() + chargingDevice.getPort());
            messageDto.setMessageContent(chargingDevlog.getEventContent());
            messageDto.setMessageType(chargingDevlog.getEventCode());
            String createTime = DateUtil.formatDate(chargingDevlog.getCreateTime());
            messageDto.setCreateTime(createTime);
            if(messageDto.getMessageType()==ChargeAppConstant.MessageType.MESSAGE_ALARM.getType()){
                messageDto.setMessageTypeDesc(ChargeAppConstant.MessageType.MESSAGE_ALARM.getTypeDesc());
            }else if(messageDto.getMessageType()==ChargeAppConstant.MessageType.MESSAGE_CHARGE_STOP.getType()){
                messageDto.setMessageTypeDesc(ChargeAppConstant.MessageType.MESSAGE_CHARGE_STOP.getTypeDesc());
            }
            messageDto.setChargeGuid(chargingDevlog.getChargingGuid());

            String dateStr = DateUtil.getDateStr(chargingDevlog.getCreateTime());
            messageDto.setDate(dateStr);
            String timeStr = DateUtil.getTimeStr(chargingDevlog.getCreateTime());
            messageDto.setTime(timeStr);
            messageDtoList.add(messageDto);
        }

        return messageDtoList;
    }

    @Override
    public AppUserDto getAppUser(String openId) {
        AppUserDto appUserDto = new AppUserDto();
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
        boolean monthUser = this.isMonthUser(chargingCst);
        if (monthUser) {
            // 包月用户
            appUserDto.setCustomerType(ChargeAppConstant.UserType.USER_MONTH.getType());
            appUserDto.setCustomerTypeDesc(ChargeAppConstant.UserType.USER_MONTH.getTypeDesc());
            appUserDto.setRemainCnt(chargingCst.getRemainCnt());
            String dateStr = DateUtil.getDateStr(chargingCst.getExpireTime());
            appUserDto.setEndTime(dateStr);
        } else {
            // 非包月用户
            appUserDto.setCustomerType(ChargeAppConstant.UserType.USER_COMMON.getType());
            appUserDto.setCustomerTypeDesc(ChargeAppConstant.UserType.USER_COMMON.getTypeDesc());
        }

        if(!StringUtils.isEmpty(chargingCst.getCustomerName())) {
            appUserDto.setName(chargingCst.getCustomerName());
        }
        if(!StringUtils.isEmpty(chargingCst.getCustomerContact())){
            appUserDto.setAuthentication(ChargeAppConstant.IsAuthentication.IS_AUTHENTICATION_HAVED.getState());
            appUserDto.setAuthenticationDesc(ChargeAppConstant.IsAuthentication.IS_AUTHENTICATION_HAVED.getDesc());
            appUserDto.setPhoneNumber(chargingCst.getCustomerContact());
        }else{
            appUserDto.setAuthentication(ChargeAppConstant.IsAuthentication.IS_AUTHENTICATION_NULL.getState());
            appUserDto.setAuthenticationDesc(ChargeAppConstant.IsAuthentication.IS_AUTHENTICATION_NULL.getDesc());
        }
        appUserDto.setIsReceiveSms(chargingCst.getIsReceiveSms());
        appUserDto.setOpenId(openId);
        appUserDto.setRemainAmount(MathUtil.setPrecision(chargingCst.getRemainAmount()));
        return appUserDto;
    }

    @Override
    public Integer updateCustomer(ChargingCst chargingCst) {
        Condition condition=new Condition(ChargingCst.class);
        condition.createCriteria().andCondition("webchar_no = '"+chargingCst.getWebcharNo()+"'");
        Integer is_success = chargingCstMapper.updateByConditionSelective(chargingCst,condition);
        return is_success;
    }

    @Override
    public Long queryUseRecordTotal(HistoryVo historyVo) {
        return chargingPayMapper.queryChargeTotal(historyVo);
    }

    @Override
    public Long queryChargeTotal(HistoryVo historyVo) {
        return chargingUseDetailedMapper.queryUseRecordTotal(historyVo);
    }

    @Override
    public CurveListNDto deviceCurve(String openId, String deviceNo) {
        CurveListDto curveListDtoCurrent = new CurveListDto();  //设置电流临时对象
        CurveListDto curveListDtoVoltage = new CurveListDto();  //设置电压临时对象
        CurveListDto curveListDtoPower = new CurveListDto();    //设置功率临时对象
        //电流数组
        List<BigDecimal> listCurrent = new ArrayList<>();
        List<String> listCurrentTime = new ArrayList<>();
        //电压数组
        List<BigDecimal> listVoltage = new ArrayList<>();
        List<String> listVoltageTime = new ArrayList<>();
        //功率数组
        List<BigDecimal> listPower = new ArrayList<>();
        List<String> listPowerTime = new ArrayList<>();

        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByOpenId(openId);

        // 查询充电日志
        List<ChargingDevlog> chargingDevlogList = chargingDevlogService.queryByChargingGuid(chargingUseDetailed.getChargingGuid());

        CurveListNDto curveListNDto = new CurveListNDto();
        if (CollectionUtils.isEmpty(chargingDevlogList)) {
            return curveListNDto;
        }

        //遍历获取需要的数据
        for(ChargingDevlog devlog: chargingDevlogList){
            //设置当前电流
            listCurrent.add(devlog.getCurrent());
            String hourMinuteStr = DateUtil.getHourMinuteStr(devlog.getCreateTime());
            listCurrentTime.add(hourMinuteStr);
            //设置当前电压
            listVoltage.add(devlog.getVoltage());
            listVoltageTime.add(hourMinuteStr);
            //设置当前功率
            listPower.add(devlog.getPower());
            listPowerTime.add(hourMinuteStr);
        }
        curveListDtoCurrent.setValueList(listCurrent);
        curveListDtoCurrent.setTimeList(listCurrentTime);

        curveListDtoVoltage.setValueList(listVoltage);
        curveListDtoVoltage.setTimeList(listVoltageTime);

        curveListDtoPower.setValueList(listPower);
        curveListDtoPower.setTimeList(listPowerTime);

        //设置电流曲线
        curveListNDto.setList_current(curveListDtoCurrent);
        //设置功率曲线
        curveListNDto.setList_power(curveListDtoPower);
        //设置电压曲线
        curveListNDto.setList_voltage(curveListDtoVoltage);
        return curveListNDto;
    }

    @Override
    @Transactional
    public Integer startCharge(String deviceNo) {
        //设置更新对象
        ChargingDevice chargingDevice_c = new ChargingDevice();
        //设置更新条件
        Condition condition=new Condition(ChargingDevice.class);
        condition.createCriteria().andCondition("device_no = '"+deviceNo+"'");
        //设置更新参数
        //如果通电则修改设备状态为充电状态
        chargingDevice_c.setRunState(1);
        //更新设备状态
        int is_success = chargingDeviceMapper.updateByConditionSelective(chargingDevice_c,condition);
        return is_success;
    }


    @Override
    @Transactional
    public void stopCharge(String openId, String chargingGuid) {
        // 更新使用记录表算费功能
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByChargingGuid(chargingGuid);

        //设置实际消费金额
        BigDecimal useMoney = chargingUseDetailed.getPrice().multiply(chargingUseDetailed.getUsePower());
        chargingUseDetailed.setConsumptionMoney(MathUtil.setPrecision(useMoney));
        //计算盈利
        BigDecimal profMoney = chargingUseDetailed.getDeductMoney().subtract(useMoney);
        //设置盈利费用
        chargingUseDetailed.setProfitable(MathUtil.setPrecision(profMoney));
        //更新充电桩使用记录
        chargingUseDetailedMapper.updateByPrimaryKeySelective(chargingUseDetailed);
    }

    @Override
    public LastUseRecordDto getLateUseRecord(String openId) {
        //设置返回对象
        LastUseRecordDto lastUseRecordDto = new LastUseRecordDto();
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryRecentUseRecord(openId);
        if (chargingUseDetailed == null) {
            return lastUseRecordDto;
        }
        lastUseRecordDto.setChargeGuid(chargingUseDetailed.getChargingGuid());

        ChargingDevice chargingDevice = chargingDeviceService.queryByChargingPlieGuid(chargingUseDetailed.getChargingPlieGuid());
        //设置设备编号
        lastUseRecordDto.setDeviceNo(chargingDevice.getDeviceNo());
        //设置开始时间
        String startTime = DateUtil.formatDate(chargingUseDetailed.getStartTime());
        lastUseRecordDto.setStartTime(startTime);
        //设置充电状态
        lastUseRecordDto.setState(chargingDevice.getRunState());
        //设置状态描述
        String descByState = ChargeConstant.DeviceRunState.getDescByState(chargingDevice.getRunState());
        lastUseRecordDto.setStateDesc(descByState);

        //设置安装地址
        lastUseRecordDto.setInstallAddr(chargingDevice.getInstallAddr());

        ChargingDevlog chargingDevlog = chargingDevlogService.queryRecentError(chargingUseDetailed.getChargingGuid());
        if (chargingDevlog == null) {
            lastUseRecordDto.setIsEvent(1);
        } else {
            lastUseRecordDto.setIsEvent(0);
            lastUseRecordDto.setEventCode(chargingDevlog.getEventCode());
            lastUseRecordDto.setEventCodeDesc(chargingDevlog.getEventContent());
        }
        return lastUseRecordDto;
    }

    @Override
    public ChargeIntecerListDto chargeList(String openId) {
        //实例化返回结果对象
        ChargeIntecerListDto chargeIntecerListDto = new ChargeIntecerListDto();

        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
        //设置用余额
        chargeIntecerListDto.setRemainAmount(MathUtil.setPrecision(chargingCst.getRemainAmount()));
        //查询用户充值记录表
        List<ChargingPay> list = chargingPayService.queryListByOpenId(openId);
        BigDecimal totalMoney = BigDecimal.ZERO;
        if(!CollectionUtils.isEmpty(list)){
            //循环获取数据
            for(ChargingPay pay: list){
                totalMoney = totalMoney.add(pay.getPayMoney());
            }
        }
        //设置已充值金额
        chargeIntecerListDto.setChargedMoney(totalMoney);

        //查询充值方案
        //设置查询条件
        Condition condition_c=new Condition(ChargingPayCheme.class);
        Example.Criteria criteria = condition_c.createCriteria();
        criteria.andEqualTo("payCategory",4);
        condition_c.setOrderByClause("sort_no ASC");
        //获取方案列表
        List<ChargingPayCheme> listCheme = chargingPayChemeMapper.selectByCondition(condition_c);
        List<ChargeListDto> chargeListDtos = new ArrayList<>();
        if(listCheme!=null){
            for(ChargingPayCheme chargingPayCheme:listCheme){
                ChargeListDto chargeListDto = new ChargeListDto();
                chargeListDto.setPriceId(chargingPayCheme.getId());
                chargeListDto.setChageMoney(chargingPayCheme.getPayMoney().floatValue());
                chargeListDto.setMoney(chargingPayCheme.getMoney().floatValue());
                chargeListDto.setChargeDesc("售价:"+chargingPayCheme.getPayMoney().floatValue());
                chargeListDtos.add(chargeListDto);
            }
        }
        //设置方案列表
        chargeIntecerListDto.setList(chargeListDtos);
        return chargeIntecerListDto;
    }

    @Override
    public ChargeIntecerDto chargeMoney(HttpServletRequest request, String ip, String openId, String priceId) {
        // 查询对应的价格方案
        ChargingPayCheme chargingPayCheme = chargingPayChemeService.selectByPrimaryKey(Integer.parseInt(priceId));
        if (chargingPayCheme == null) {
            throw new BusinessException("对应的价格方案不存在");
        }

        // 查询充值客户信息
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);

        //调用支付接口
        Ajax ajax = wxChargerPayService.chargePay(2,null,chargingPayCheme.getPayMoney(),ip,chargingPayCheme,chargingCst.getCustomerGuid(),openId);

        //微信预支付下单成功，设置微信下单参数
        ChargeIntecerDto chargeIntecerDto = new ChargeIntecerDto();
        chargeIntecerDto.setAppId(ajax.getParams().get("appId"));
        chargeIntecerDto.setNonceStr(ajax.getParams().get("nonceStr"));
        chargeIntecerDto.setTimeStamp(ajax.getParams().get("timeStamp"));
        chargeIntecerDto.setPackages(ajax.getParams().get("package"));
        chargeIntecerDto.setPaySign(ajax.getParams().get("paySign"));
        chargeIntecerDto.setSignType(ajax.getParams().get("signType"));
        return chargeIntecerDto;
    }

    @Override
    public ChargeCompleteDto chargeComplete(String openId, String chargingGuid) {
        //创建结果对象
        ChargeCompleteDto resultDto = new ChargeCompleteDto();
        ChargingUseDetailed chargingUseDetailed;
        //判断是否传入charging_guid
        if(StringUtils.isEmpty(chargingGuid)){
            //查询最近一条充电桩使用记录
            chargingUseDetailed = chargingUseDetailedService.queryRecentUseRecord(openId);
        }else{
            //根据charging_guid查询
            chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByChargingGuid(chargingGuid);
        }

        //设置选择充电的套餐类型
        this.setCompleteParams(chargingUseDetailed,resultDto);

        //查询异常
        ChargingDevlog chargingDevlog = chargingDevlogService.queryRecentError(chargingUseDetailed.getChargingGuid());
        resultDto.setIsEvent(0);
        if (chargingDevlog != null) {
            //设置异常
            resultDto.setIsEvent(1);
            resultDto.setEventCodeDesc(chargingDevlog.getEventContent());
        }
        return resultDto;
    }

    @Override
    public ChargeCompleteDto chargeMessageComplete(String chargingGuid, Integer messageType) {
        //创建结果对象
        ChargeCompleteDto resultDto = new ChargeCompleteDto();

        //根据charging_guid查询
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByChargingGuid(chargingGuid);

        this.setCompleteParams(chargingUseDetailed,resultDto);
        //查询异常
        ChargingDevlog chargingDevlog = chargingDevlogService.queryRecentEvent(chargingGuid,messageType);
        resultDto.setIsEvent(0);
        if (chargingDevlog.getEventCode() == 1) {
            //设置异常
            resultDto.setIsEvent(1);
            resultDto.setEventCodeDesc(chargingDevlog.getEventContent());
        }
        return resultDto;
    }

    @Override
    public List<MonthDetialDto> monthlyCardDetial(String openId) {
        //实例化返回对象
        List<MonthDetialDto> list = new ArrayList<>();
        //查询月卡方案
        List<ChargingPayCheme> payChemeList = chargingPayChemeService.queryMonthSchemeList();
        //设置数据
        for(ChargingPayCheme cheme:payChemeList){
            MonthDetialDto monthDetialDto = new MonthDetialDto();
            monthDetialDto.setChargingCnt(cheme.getChargingCnt());
            monthDetialDto.setChargingTime((cheme.getNumMonths()*30));
            monthDetialDto.setMoney(cheme.getMoney());
            monthDetialDto.setPriceId(cheme.getId());
            list.add(monthDetialDto);
        }
        return list;
    }

    @Override
    public RegisterDto register(String openId, String phoneNumber, String verificationCode) {
        RegisterDto registerDto = new RegisterDto();
        //查询该手机号是否被注册过
        ChargingCst chargingCst = chargingCstService.queryByOpenIdAndPnone(openId,phoneNumber);
        if(chargingCst!=null){
            registerDto.setIsSuccess(ChargeAppConstant.RegisterState.REGISTER_HAVED.getState());
            registerDto.setIsSuccessDesc(ChargeAppConstant.RegisterState.REGISTER_HAVED.getDesc());
            return registerDto;
        }
        //验证验证码是否正确
        aliyunSmsService.verifySmsCode(phoneNumber,verificationCode);
        //更新客户信息
        Integer isSuccess = chargingCstService.updateCustomer(openId,phoneNumber);
        if(isSuccess==0){
            registerDto.setIsSuccess(ChargeAppConstant.RegisterState.REGISTER_FAIL.getState());
            registerDto.setIsSuccessDesc(ChargeAppConstant.RegisterState.REGISTER_FAIL.getDesc());
            return registerDto;
        }
        registerDto.setIsSuccess(ChargeAppConstant.RegisterState.REGISTER_SUCCESS.getState());
        registerDto.setIsSuccessDesc(ChargeAppConstant.RegisterState.REGISTER_SUCCESS.getDesc());
        return registerDto;
    }

    @Override
    public MonthChargeDto monthOfCharge(String openId,String ip,Integer priceId) {
        MonthChargeDto monthChargeDto = new MonthChargeDto();
        // 查询充值客户信息
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
        monthChargeDto.setIsCharge(ChargeAppConstant.IsCHargeCardOfMonth.CHARGE_CARD_ENABLE.getState());
        monthChargeDto.setIsChargeDesc(ChargeAppConstant.IsCHargeCardOfMonth.CHARGE_CARD_ENABLE.getDesc());
        //判断该客户是否是包月用户
        if(this.isMonthUser(chargingCst)){
            monthChargeDto.setIsCharge(ChargeAppConstant.IsCHargeCardOfMonth.CHARGE_CARD_UNABLE.getState());
            monthChargeDto.setIsChargeDesc(ChargeAppConstant.IsCHargeCardOfMonth.CHARGE_CARD_UNABLE.getDesc());
            return monthChargeDto;
        }

        //查询价格方案
        ChargingPayCheme param = new ChargingPayCheme();
        param.setId(priceId);
        ChargingPayCheme chargingPayCheme = chargingPayChemeMapper.selectOne(param);

        BigDecimal subtract = chargingCst.getRemainAmount().subtract(chargingPayCheme.getMoney());
        boolean flag = MathUtil.isLessThanZero(subtract);
        if (flag) {
            // 取相反数
            BigDecimal negate = subtract.negate();
            //调用充值接口
            Ajax ajax = wxChargerPayService.chargePay(1,chargingCst.getRemainAmount(),negate,ip,chargingPayCheme,chargingCst.getCustomerGuid(),openId);
            //微信预支付下单成功，设置微信下单参数
            monthChargeDto.setAppId(ajax.getParams().get("appId"));
            monthChargeDto.setNonceStr(ajax.getParams().get("nonceStr"));
            monthChargeDto.setTimeStamp(ajax.getParams().get("timeStamp"));
            monthChargeDto.setPackages(ajax.getParams().get("package"));
            monthChargeDto.setPaySign(ajax.getParams().get("paySign"));
            monthChargeDto.setSignType(ajax.getParams().get("signType"));
            monthChargeDto.setIsPay(ChargeAppConstant.IsPay.PAY_ENABLE.getPay());
            monthChargeDto.setIsPayDesc(ChargeAppConstant.IsPay.PAY_ENABLE.getPayDesc());
            return monthChargeDto;
        } else {
            //余额足够直接扣减余额
            monthChargeDto.setIsPay(ChargeAppConstant.IsPay.PAY_UNABLE.getPay());
            monthChargeDto.setIsPayDesc(ChargeAppConstant.IsPay.PAY_UNABLE.getPayDesc());
            //调用扣减接口
            wxChargerPayService.deductionsOfMonth(chargingCst,chargingPayCheme);
            return monthChargeDto;
        }
    }

    @Override
    public Integer isReceiveSms(String openId, Integer isReceiveSms) {
        //根据openId查询到用户
        ChargingCst chargingCst = chargingCstService.queryByOpenId(openId);
        chargingCst.setIsReceiveSms(isReceiveSms);
        //更新用户接收短信的标志
        Integer isSuccess = chargingCstService.updateByPrimaryKeySelective(chargingCst);
        return isSuccess;
    }

    @Override
    public RegisterDto updatePhoneNumber(String openId, String phoneNumber, String verificationCode) {
        RegisterDto registerDto = new RegisterDto();
        //查询该手机号是否被注册过
        ChargingCst chargingCst = chargingCstService.queryByOpenIdAndPnone(openId,phoneNumber);
        if(chargingCst!=null){
            registerDto.setIsSuccess(ChargeAppConstant.UpdatePhone.UPDATE_REGISTER_HAVED.getState());
            registerDto.setIsSuccessDesc(ChargeAppConstant.UpdatePhone.UPDATE_REGISTER_HAVED.getDesc());
            return registerDto;
        }
        ChargingCst param = chargingCstService.queryByOpenId(openId);
        //验证验证码是否正确
        aliyunSmsService.verifySmsCode(param.getCustomerContact(),verificationCode);
        //更新客户信息
        Integer isSuccess = chargingCstService.updateCustomer(openId,phoneNumber);
        if(isSuccess==0){
            registerDto.setIsSuccess(ChargeAppConstant.UpdatePhone.UPDATE_FAILE.getState());
            registerDto.setIsSuccessDesc(ChargeAppConstant.UpdatePhone.UPDATE_FAILE.getDesc());
            return registerDto;
        }
        registerDto.setIsSuccess(ChargeAppConstant.UpdatePhone.UPDATE_SUCCESS.getState());
        registerDto.setIsSuccessDesc(ChargeAppConstant.UpdatePhone.UPDATE_SUCCESS.getDesc());
        return registerDto;
    }

    @Override
    public void sendAlarmMessage(ChargingDevlog chargingDevlog,String address,String createTime) {
        //根据chargingGuid去查询使用记录
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByChargingGuid(chargingDevlog.getChargingGuid());
        //获取到相应的客户信息
        ChargingCst chargingCst = chargingCstService.queryByOpenId(chargingUseDetailed.getWebcharNo());
        //给相应的客户发送警告信息
        if(chargingCst.getIsReceiveSms()==1 && !StringUtils.isEmpty(chargingCst.getCustomerContact())){
            ChargeAbnormalAlarmParam alarmParam = new ChargeAbnormalAlarmParam();
            alarmParam.setChargingGuid(chargingUseDetailed.getChargingGuid());
            alarmParam.setOpenId(chargingUseDetailed.getWebcharNo());
            // TODO 暂时写死
            alarmParam.setContactPhone("028-85363622");
            alarmParam.setMobilePhone(chargingCst.getCustomerContact());
            SimpleDateFormat format = new SimpleDateFormat("HH时mm分ss秒");
            String endTime = format.format(chargingDevlog.getCreateTime());
            alarmParam.setEndTime(endTime);
            alarmParam.setEventContent(chargingDevlog.getEventContent());
            aliyunSmsService.sendChargeAbnormalAlarm(alarmParam);
        }
    }

    @Override
    public void sendStopMessage(String chargingGuid, String address, String createTime) {
        //根据chargingGuid去查询使用记录
        ChargingUseDetailed chargingUseDetailed = chargingUseDetailedService.queryChargingRecordByChargingGuid(chargingGuid);
        //获取到相应的客户信息
        ChargingCst chargingCst = chargingCstService.queryByOpenId(chargingUseDetailed.getWebcharNo());
        //根据chagingGuid查询日志断电记录
        ChargingDevlog chargingDevlog = chargingDevlogService.queryRecentStop(chargingGuid);
        //给相应的客户发送警告信息
        if(chargingCst.getIsReceiveSms()==1&&!StringUtils.isEmpty(chargingCst.getCustomerContact())){
            ChargeNormalAlarmParam alarmParam = new ChargeNormalAlarmParam();
            alarmParam.setChargingGuid(chargingUseDetailed.getChargingGuid());
            alarmParam.setOpenId(chargingUseDetailed.getWebcharNo());
            alarmParam.setMobilePhone(chargingCst.getCustomerContact());
            Date endTime = chargingUseDetailed.getEndTime();
            Date startTime = chargingUseDetailed.getStartTime();
            String chargeTime = DateUtil.getTimeDifferenceNew(endTime, startTime);
            alarmParam.setChargeTime(chargeTime);
            SimpleDateFormat format = new SimpleDateFormat("HH时mm分");
            String beginTime = format.format(startTime);
            alarmParam.setBeginTime(beginTime);
            alarmParam.setEndTime(format.format(endTime));
            aliyunSmsService.sendChargeNormalAlarm(alarmParam);
        }
    }

    @Override
    public WithdrawCashInfo queryCashInfo(String openId) {
        ChargingCst cst = chargingCstService.queryByOpenId(openId);

        WithdrawCashInfo cashInfo = new WithdrawCashInfo();
        cashInfo.setRemainAmount(cst.getRemainAmount());
        cashInfo.setWithdrawCashAmount(cst.getRemainAmount());

        ChargingProject chargingProject = chargingProjectService.queryProjectInfo();
        cashInfo.setContactTelphone(chargingProject.getContactTelphone());
        return cashInfo;
    }

    private void setCompleteParams(ChargingUseDetailed chargingUseDetailed, ChargeCompleteDto resultDto ){
        Integer payCategory = chargingUseDetailed.getPayCategory();
        resultDto.setPayCategory(payCategory);
        if(ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType().equals(payCategory)){
            resultDto.setPayCategoryDesc(ChargeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getDesc());
            //设置充电金额
            resultDto.setPayMoney(chargingUseDetailed.getDeductMoney());
            //设置剩余金额
            resultDto.setRemainAmount(chargingUseDetailed.getAfterRemainAmount());
        }else if(ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(payCategory)){
            resultDto.setPayCategoryDesc(ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getDesc());
            //设置扣除次数
            resultDto.setUseCnt(1);
            //设置剩余次数
            resultDto.setRemainCnt(chargingUseDetailed.getAfterRemainCnt());
        }else if(ChargeConstant.SchemePayCategory.RECHARGE_FULL.getType().equals(payCategory)){
            resultDto.setPayCategoryDesc(ChargeConstant.SchemePayCategory.RECHARGE_FULL.getDesc());
            //设置充电金额
            resultDto.setPayMoney(chargingUseDetailed.getDeductMoney());
            //设置剩余金额
            resultDto.setRemainAmount(chargingUseDetailed.getAfterRemainAmount());
        }
        //设置充电时长
        String eDate = DateUtil.formatDate(chargingUseDetailed.getEndTime());
        String sDate = DateUtil.formatDate(chargingUseDetailed.getStartTime());
        String chargeTime = DateUtil.getTimeDifference(eDate,sDate);
        resultDto.setChargeTime(chargeTime);

        //设置开始充电时间
        resultDto.setStartTime(DateUtil.formatDate(chargingUseDetailed.getStartTime()));
        //设置结束充电时间
        resultDto.setEndTime(DateUtil.formatDate(chargingUseDetailed.getEndTime()));
        //设置联系电话
        ChargingDevice chargingDevice = chargingDeviceService.queryByChargingPlieGuid(chargingUseDetailed.getChargingPlieGuid());
        resultDto.setDeviceNo(chargingDevice.getDeviceNo() + chargingDevice.getPort());
        ChargingProject chargingProject = chargingProjectService.queryByProjectGuid(chargingDevice.getProjectGuid());
        resultDto.setContact(chargingProject.getContactTelphone());
    }
}
