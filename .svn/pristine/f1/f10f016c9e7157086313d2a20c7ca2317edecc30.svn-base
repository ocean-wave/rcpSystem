package cn.com.cdboost.collect.impl;

import cn.com.cdboost.collect.common.BaseServiceImpl;
import cn.com.cdboost.collect.constant.ChargeConstant;
import cn.com.cdboost.collect.dao.ChargingCstMapper;
import cn.com.cdboost.collect.dto.param.AccountOperateVo;
import cn.com.cdboost.collect.model.ChargingAccountFlow;
import cn.com.cdboost.collect.model.ChargingCst;
import cn.com.cdboost.collect.service.ChargingAccountFlowService;
import cn.com.cdboost.collect.service.ChargingCstService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Condition;

import java.math.BigDecimal;
import java.util.Date;

/**
 * 客户信息接口服务实现类
 */
@Service
public class ChargingCstServiceImpl extends BaseServiceImpl<ChargingCst> implements ChargingCstService {

    @Autowired
    private ChargingCstMapper chargingCstMapper;
    @Autowired
    private ChargingAccountFlowService chargingAccountFlowService;

    @Override
    public ChargingCst queryByOpenId(String openId) {
        ChargingCst param = new ChargingCst();
        param.setWebcharNo(openId);
        return chargingCstMapper.selectOne(param);
    }

    @Override
    public ChargingCst queryByOpenIdAndPnone(String openId, String phoneNumber) {
        ChargingCst param = new ChargingCst();
        param.setWebcharNo(openId);
        param.setCustomerContact(phoneNumber);
        return chargingCstMapper.selectOne(param);
    }

    @Override
    public Integer updateCustomer(String openId,String phoneNumber) {
        ChargingCst chargingCst = new ChargingCst();
        chargingCst.setCustomerContact(phoneNumber);
        Condition condition = new Condition(ChargingCst.class);
        Condition.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("webcharNo",openId);
        Integer isSuccess = chargingCstMapper.updateByConditionSelective(chargingCst,condition);
        return isSuccess;
    }

    @Override
    @Transactional
    public void updateAccount(AccountOperateVo accountOperateVo) {
        // 更新账户余额
        Integer businessType = accountOperateVo.getBusinessType();
        Integer accountId = accountOperateVo.getAccountId();
        BigDecimal amount = accountOperateVo.getAmount();
        Integer chargeCnt = accountOperateVo.getChargeCnt();
        Date expireTime = accountOperateVo.getExpireTime();
        if (ChargeConstant.SchemePayCategory.MONTH_RECHARGE.getType().equals(businessType)) {
            // 包月充值
            chargingCstMapper.updateAccountCnt(accountId,chargeCnt,expireTime,new Date());
        } else {
            // 扣余额
            chargingCstMapper.updateAccountAmount(accountId,amount,new Date());
        }

        // 新增账户变动流水记录
        ChargingAccountFlow flow = new ChargingAccountFlow();
        flow.setAccountId(accountId);
        flow.setAmount(amount);
        flow.setChargeCnt(chargeCnt);
        flow.setBusinessType(accountOperateVo.getBusinessType());
        flow.setGuid(accountOperateVo.getGuid());
        flow.setCreateTime(new Date());
        flow.setRemark(accountOperateVo.getReamrk());
        chargingAccountFlowService.insertSelective(flow);
    }

    @Override
    public void updateAccountNew(ChargingCst param, AccountOperateVo accountOperateVo) {
        // 更新账户余额
        Integer accountId = accountOperateVo.getAccountId();
        BigDecimal amount = accountOperateVo.getAmount();
        Integer chargeCnt = accountOperateVo.getChargeCnt();
        chargingCstMapper.updateByPrimaryKeySelective(param);


        // 新增账户变动流水记录
        ChargingAccountFlow flow = new ChargingAccountFlow();
        flow.setAccountId(accountId);
        flow.setAmount(amount);
        flow.setChargeCnt(chargeCnt);
        flow.setBusinessType(accountOperateVo.getBusinessType());
        flow.setGuid(accountOperateVo.getGuid());
        flow.setCreateTime(new Date());
        flow.setRemark(accountOperateVo.getReamrk());
        chargingAccountFlowService.insertSelective(flow);
    }
}
